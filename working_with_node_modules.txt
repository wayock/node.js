Questions

1. How do you import a module?

There are a few ways one can import a module.  One way is to create a file and then in the main node file,
such as index.js, you require (or import) that file.  Another way to import a module is to add it to one's
package.json file and install it using npm.  Here you would write the name of the module you are importing
under dependencies.



2. What JavaScript statement do you use to export a module?

module.exports = () => {

};


Online Research Questions


1. Are there other ways to export a module?

You can use an exports shortcut.

Example:

function require(/* ... */) {
  const module = { exports: {} };
  ((module, exports) => {
    // Module code here. In this example, define a function.
    function someFunc() {}
    exports = someFunc;
    // At this point, exports is no longer a shortcut to module.exports, and
    // this module will still export an empty default object.
    module.exports = someFunc;
    // At this point, the module will now export someFunc, instead of the
    // default object.
  })(module, module.exports);
  return module.exports;
}

https://nodejs.org/docs/latest-v8.x/api/modules.html#modules_exports_shortcut


2. What are ES6 modules and how do they differ from the module we created in this checkpoint?

ES6 modules (or ECMAScript modules) are the official standard format to package JavaScript code for reuse.
Modules are defined using a variety of import and export statements.  Node.js fully supports ECMAScript
modules as they are currently specified and provides limited interoperability between them and the existing
module format, CommonJS (used in the checkpoint).

The following are some differences between ES6 modules and CommonJS modules.  In ES6 modules:
  1.  A file extension must be provided when using the `import` keyword.
  2. `NODE_PATH` is not part of resolving `import` specifiers.
  3. `require.extensions` is not used by `import`
  4. `require.cache` is not used by `import`
  5. ES modules are resolved and cached based upon URL semantics. This means that files containing special
  characters such as # and ? need to be escaped.

      Modules will be loaded multiple times if the import specifier used to resolve them have a different
      query or fragment.

      import './foo.mjs?query=1'; // loads ./foo.mjs with query of "?query=1"
      import './foo.mjs?query=2'; // loads ./foo.mjs with query of "?query=2"

      For now, only modules using the file: protocol can be loaded.

https://nodejs.org/api/esm.html#esm_introduction
