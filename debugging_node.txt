Questions
1. How do you access the DevTools for Node in Chrome?

Open Chrome, and in the URL search bar enter: chrome://inspect.
On the page that loads, click: Open dedicated DevTools for Node.


2. What are the main differences between the regular Chrome DevTools and the DevTools for Node?

The main difference is that Chrome DevTools allows you to debug in the browser while DevTools for Node one
is debugging in the terminal.

The DevTools for Node debugger uses a protocol called V8-Debug, while Chrome DevTools uses the Chrome
Debugging Protocol.  That means Node Inspector has to step between the two and translate.



3. Using the built-in Node debug tool, what command do you use to continue the execution of your code.

cont or c and hit return


4. Which statement do you put in your code to set a breakpoint?

debugger



Code Challenge
There is no code challenge for this checkpoint, but you are encouraged to go to exercises in previous
checkpoints in order to try using the Chrome DevTools for Node and the built-in Node debugging. These
tools will come in particularly handy in the remaining 3 sections of Node. Tell us what you learned from
using these handy debug tools, and discuss further use cases with your mentor in your next session.

The main thing I learned is that these tools are available, how they work, and how to use them to identify
errors in my code.  I like have the option to use the debugging features in both Chrome Devtools and
Devtools for Node.
